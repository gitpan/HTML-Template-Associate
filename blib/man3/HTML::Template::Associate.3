.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::Template::Associate 3"
.TH HTML::Template::Associate 3 "2005-11-28" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
HTML::Template::Associate 
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #Example usage with CGI and FormValidator as the target
.Ve
.PP
.Vb 4
\&  use CGI qw/:standard/;
\&  use Data::FormValidator;
\&  use HTML::Template;
\&  use HTML::Template::Associate;
.Ve
.PP
.Vb 5
\&  my $cgi = CGI->new;
\&  #for testing purposes we can add some input to our cgi object
\&  $cgi->param( q{fullname}, q{John Doe} );
\&  $cgi->param( q{phone}, 6041112222 );
\&  $cgi->param( q{email}, q{invalid@email} );
.Ve
.PP
.Vb 24
\&  my $input_profile = {
\&            optional     =>
\&                [ qw( company fax country ) ],
\&            required     =>
\&                [ qw( fullname phone email address city state zipcode ) ],
\&            constraints  =>
\&                {
\&                    email       => "email",
\&                    fax         => "american_phone",
\&                    phone       => "american_phone",
\&                    zipcode     => '/^\es*\ed{5}(?:[-]\ed{4})?\es*$/',
\&                    state       => "state",
\&                },
\&            defaults => {
\&                country => "Canada",
\&            },
\&            msgs => {
\&                prefix=> 'error_',
\&                missing => 'Not Here!',
\&                invalid => 'Problematic!',
\&                invalid_seperator => ' <br /> ',
\&                format => 'ERROR: %s',
\&                any_errors => 'some_errors',
\&            }
.Ve
.PP
.Vb 1
\&  };
.Ve
.PP
.Vb 2
\&  my $validator = Data::FormValidator->new;
\&  my $results = $validator->check ( scalar $cgi->Vars, $input_profile );
.Ve
.PP
.Vb 4
\&  my $associate = HTML::Template::Associate->new( {
\&        target => 'FormValidator', 
\&        results => $results,
\&        extra_arguments => [ $validator ] } ); #not needed but just illustrated
.Ve
.PP
.Vb 3
\&  my $template = HTML::Template->new(
\&        filename => 'test.tmpl', 
\&        associate => [ $cgi, $associate ] );
.Ve
.PP
.Vb 1
\&  print $template->output;
.Ve
.PP
.Vb 1
\&  #and in our test.tmpl file we could have
.Ve
.PP
.Vb 5
\&  Valid Fields:<br>
\&  <TMPL_LOOP NAME=VALID_FIELDS>
\&      Field Name: <TMPL_VAR NAME=FIELD_NAME><br>
\&      Field Value: <TMPL_VAR NAME=FIELD_VALUE><br> 
\&  </TMPL_LOOP>
.Ve
.PP
.Vb 5
\&  Missing Fields:<br>
\&  <TMPL_LOOP NAME=MISSING_FIELDS>
\&      Field Name: <TMPL_VAR NAME=FIELD_NAME><br>
\&      Field Value: <TMPL_VAR NAME=FIELD_VALUE><br> 
\&  </TMPL_LOOP>
.Ve
.PP
.Vb 3
\&  <TMPL_IF NAME=INVALID_phone>
\&      Phone: <TMPL_VAR NAME="phone"> you supplied is invalid.           
\&  </TMPL_IF>
.Ve
.PP
.Vb 3
\&  <TMPL_IF NAME=MISSING_city> 
\&      City name is missing, please fix this.
\&  </TMPL_IF>
.Ve
.PP
.Vb 1
\&  <!-- We can also access our normal field names since $cgi object was passed as associate as well -->
.Ve
.PP
.Vb 1
\&  I think <TMPL_VAR NAME=country> is very big country.
.Ve
.PP
.Vb 1
\&  <!-- Optional use of Data::FormValidator::Results msgs interface -->
.Ve
.PP
.Vb 1
\&  Message Fields:
.Ve
.PP
.Vb 4
\&  <TMPL_LOOP NAME=MSGS_FIELDS>
\&      Field Name: <TMPL_VAR NAME=FIELD_NAME><br>
\&      Field Value: <TMPL_VAR NAME=FIELD_VALUE><br>
\&  </TMPL_LOOP>
.Ve
.PP
.Vb 3
\&  <TMPL_IF NAME=MSGS_error_city>
\&        Our default error message set in the profiling code is: <TMPL_VAR NAME=MSGS_error_city> 
\&  </TMPL_IF>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 5
\&  HTML::Template::Associate bridges gap between HTML::Template and 
\&  other modules that can be used in conjunction with it to do something 
\&  useful together, like for example Data::FormValidator that can verify form inputs. 
\&  The primary reason I wrote this is that I needed something to bridge those two and 
\&  the thought of creating something more expandable came to mind.
.Ve
.PP
.Vb 4
\&  The idea is that every associate object can map required data structure onto
\&  the one which corresponds to the one being documented publicly in the HTML::Template.
\&  The factory will then instantiate the target class and user can then make it available 
\&  to HTML::Template via associate argument during object construction. The data structures   then become automatically visible to your templates.
.Ve
.PP
.Vb 3
\&  This module is abstract class it provides no mapping functionality
\&  whatsoever, but rather defines common interface to all associate
\&  objects underneath it and acts as a object production factory.
.Ve
.PP
.Vb 2
\&  You should however use this module whenever you wish to access a
\&  concrete associate class that provides functionality you desire.
.Ve
.PP
.Vb 1
\&  I hope that with time more useful associate objects spring into existence.
.Ve
.SH "USAGE"
.IX Header "USAGE"
.Vb 1
\&  #where $results = Data::FormValidator::Results; for example
.Ve
.PP
.Vb 3
\&  my $associate = HTML::Template::Associate->new( {
\&        target => 'FormValidator',
\&        results => $results );
.Ve
.PP
.Vb 2
\&  Target is always last portion of your full class name, so if
\&  you had HTML::Template::Associate::XYZ the target would be XYZ
.Ve
.SH "BUGS"
.IX Header "BUGS"
.Vb 1
\&  Maybe. If you see any make sure you let me know.
.Ve
.SH "SUPPORT"
.IX Header "SUPPORT"
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\&        Alex Pavlovic
\&        alex@taskforce-1.com
\&        http://www.taskforce-1.com
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTML::Template::Associate::FormValidator \fIperl\fR\|(1).
.Sh "new"
.IX Subsection "new"
.Vb 6
\& Usage     : my $associate = HTML::Template::Associate->new ( target => 'FormValidator', results => $results );
\& Purpose   : Constructs new associate object
\& Returns   : associate instance
\& Argument  : Hash of arguments ( target specifying object to be created, results specifying result set, optional extra_arguments specifying additional arguments to be passed inside target object )
\& Throws    : Error in case target does not exist
\& Comments  : Please note that target is always last portion of your full class name, so if you had HTML::Template::Associate::XYZ the target would be XYZ
.Ve
.Sh "param"
.IX Subsection "param"
.Vb 6
\& Usage     : my $MyParam = $associate->param(q{MyParam});
\& Purpose   : Retrieves param in a form suitable for access by HTML::Template
\& Returns   : Single param or arrays suitable for loops 
\& Argument  : Parameter name and optional value if setting it
\& Throws    : Error in case subroutine was not implemented in concrete class
\& Comments  : This subroutine should be redefined in concrete class
.Ve
.Sh "init"
.IX Subsection "init"
.Vb 6
\& Usage     : $self->init ( $params );
\& Purpose   : Provides basic initiliazation for the target class
\& Returns   : true or false depending on whether initilization was succesful
\& Argument  : hash of parameters passed to factory during object construction
\& Throws    : Error in case subroutine was not implemented in concrete class
\& Comments  : This subroutine should be redefined in concrete class
.Ve
.Sh "log"
.IX Subsection "log"
.Vb 1
\& Purpose   : Used internally to warn errors
.Ve
.Sh "error"
.IX Subsection "error"
.Vb 1
\& Purpose   : Used internally to die on errors
.Ve
