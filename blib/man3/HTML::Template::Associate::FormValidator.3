.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::Template::Associate::FormValidator 3"
.TH HTML::Template::Associate::FormValidator 3 "2006-01-03" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
HTML::Template::Associate::FormValidator \- HTML::Template::Associate Data::FormValidator plugin 
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  This class is not intended to be used directly but rather through a 
\&  HTML::Template::Associate. It provides concrete class functionality, it
\&  will take Data::FormValidator::Results object and reconstruct data structure
\&  to one appropriate for use by the HTML::Template.
.Ve
.PP
.Vb 1
\&  The following will become available to your associate object/template:
.Ve
.PP
.Vb 1
\&  Key          /                    Perl                /           Template
.Ve
.PP
.Vb 1
\&  Arrays / Loops
.Ve
.PP
.Vb 5
\&  VALID_FIELDS     / $associate->param(q{VALID_FIELDS});     / <TMPL_LOOP NAME=VALID_FIELDS>
\&  MISSING_FIELDS   / $associate->param(q{MISSING_FIELDS});   / <TMPL_LOOP NAME=MISSING_FIELDS>   
\&  INVALID_FIELDS   / $associate->param(q{INVALID_FIELDS});   / <TMPL_LOOP NAME=INVALID_FIELDS>
\&  UNKNOWN_FIELDS   / $associate->param(q{UNKNOWN_FIELDS});   / <TMPL_LOOP NAME=UNKNOWN_FIELDS>
\&  MSGS_FIELDS      / $associate->param(q{MSGS_FIELDS});      / <TMPL_LOOP NAME=MSGS_FIELDS>
.Ve
.PP
.Vb 1
\&  Variables
.Ve
.PP
.Vb 5
\&  VALID_ParamA       / $associate->param(q{VALID_ParamA});       / <TMPL_VAR NAME=VALID_ParamA>
\&  MISSING_ParamB     / $associate->param(q{MISSING_ParamB});     / <TMPL_VAR NAME=MISSING_ParamB>
\&  INVALID_ParamC     / $associate->param(q{INVALID_ParamC});     / <TMPL_VAR NAME=INVALID_ParamC>
\&  UNKNOWN_ParamD     / $associate->param(q{UNKNOWN_ParamD});     / <TMPL_VAR NAME=UNKNOWN_ParamD>
\&  MSGS_prefix_ParamE / $associate->param(q{MSGS_prefix_ParamE}); / <TMPL_VAR NAME=MSGS_prefix_ParamE>
.Ve
.PP
.Vb 1
\&  Inside Array / Loops we have the following structure:
.Ve
.PP
.Vb 1
\&  Perl
.Ve
.PP
.Vb 1
\&  VALID_FIELDS => [ { FIELD_NAME => X }, FIELD_VALUE => Y }, ... ]
.Ve
.PP
.Vb 1
\&  Template
.Ve
.PP
.Vb 4
\&  <TMPL_LOOP NAME=VALID_FIELDS>
\&        <TMPL_VAR NAME=FIELD_NAME> 
\&        <TMPL_VAR NAME=FIELD_VALUE>     
\&  </TMPL_LOOP>
.Ve
.PP
.Vb 4
\&  For further explanation on what the VALID,MISSING,INVALID,UNKNOWN AND MSGS are
\&  please refer to Data::FormValidator::Results. Please note that MSGS 
\&  works somewhat diffrently then others and corresponds to $results->msgs([$config])
\&  interface.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\& Map Data::FormValidator::Results object into a form suitable for use by HTML::Template
.Ve
.SH "USAGE"
.IX Header "USAGE"
.Vb 1
\& See above.
.Ve
.SH "BUGS"
.IX Header "BUGS"
.Vb 1
\& If you find any please report to author.
.Ve
.SH "SUPPORT"
.IX Header "SUPPORT"
.Vb 1
\& See License.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\&        Alex Pavlovic
\&        alex@taskforce-1.com
\&        http://www.taskforce-1.com
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTML::Template::Associate \fIperl\fR\|(1).
.Sh "init"
.IX Subsection "init"
.Vb 6
\& Usage     : $associate->init ( $results, $extra_arguments );
\& Purpose   : Initiliazes the object
\& Returns   : concrete object instance
\& Argument  : Data::FormValidator::Results instance and extra hash of arguments passed to factory    
\& Comments  : Factory class will call this method automatically during concrete object construction
\&           : Error is thrown depending whether the passed in results object is of correct type
.Ve
.PP
See Also   : HTML::Template::Associate Data::FormValidator::Results  
.Sh "param"
.IX Subsection "param"
.Vb 5
\& Usage     : $associate->param ( $field, $value );
\& Purpose   : Sets or returns the proper variable or loop structure, suitable for HTML::Template to use 
\& Returns   : Value of the param  
\& Argument  : Field name to find and optional value to set for that field if field was to be found
\& Comments  : This method is called by HTML::Template once associate object is passed to it
.Ve
.PP
See Also   : HTML::Template::Associate Data::FormValidator::Results
.Sh "runloop"
.IX Subsection "runloop"
.Vb 1
\& Usage     : used internally to assign various prefixes/names to variables and loops
.Ve
